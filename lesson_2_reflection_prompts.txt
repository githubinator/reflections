What happens when you initialize a repository? Why do you need to do it?

    Git creates a new, empty repository. It only contains metadata in directory ".git".
    It is needed to be able to administer files in a repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    The staging area contains the files which should be committed into the repository
    during the next commit operation. It allows you to select which files you want to
    commit. That is, you don't have to commit all changed or added files to the repository
    at the same time.

How can you use the staging area to make sure you have one commit per logical
change?

    You use "git add" to add a new or changed file to the staging area for only those
    files you wish to commit to the repository during the next commit.
    You can compare the differences between staging area and repository using "git diff --staged".

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    Branches are helpful for implementing things which may go to the master branch
    at a later point in time, e.g. for experimental changes, or for changes which need
    long development times, or for changes which are to be done by different developers.
    A branch helps, because everything what is done in a branch does not affect other
    branches.

How do the diagrams help you visualize the branch structure?
    
    The diagrams show the reachability of all parent commits of each branch. You can see
    where the branches started and therefore which commits have to be merge, once you
    want to integrate two branches.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
    
    Differing files are merged into one file, containing contents of all merged branches.
    When branches are merged, each commit of the merged branches is reachable from the merged version. This can be shown as a graph, which makes the history of the versions easier to
    see.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
    
    Pros:
      - less work for the users
    Cons:
      - cannot resolve conflicts which can be resolved easily by a user
